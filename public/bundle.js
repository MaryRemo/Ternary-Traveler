(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _travelerCollection = _interopRequireDefault(require("./travelerCollection"));

var _travelerList = _interopRequireDefault(require("./travelerList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const editForm = {
  createEditForm(travelToEdit) {
    let travelNameField = document.createElement("p");
    let travelNameLabels = document.createElement("label");
    travelNameLabels.textContent = "Cost";
    let travelNameInput = document.createElement("input");
    travelNameInput.value = travelToEdit.cost;
    travelNameField.appendChild(travelNameLabels);
    travelNameField.appendChild(travelNameInput);
    let travelReviewField = document.createElement("p");
    let travelReviewLabel = document.createElement("label");
    travelReviewLabel.textContent = "Review";
    let travelReviewInput = document.createElement("input");
    travelReviewInput.value = travelToEdit.review;
    travelReviewField.appendChild(travelReviewLabel);
    travelReviewField.appendChild(travelReviewInput);
    let updateButton = document.createElement("button");
    updateButton.textContent = "Update";
    updateButton.addEventListener("click", () => {
      let editedEvents = {
        cost: travelNameInput.value,
        review: travelReviewInput.value
      };

      _travelerCollection.default.editTravels(travelToEdit.id, editedEvents).then(response => {
        _travelerList.default.listing();

        console.log(response);
        let travelItemArticle = document.querySelector(".displayTravels");
        travelItemArticle.innerHTML = "";
      });
    });
    let eventItemArticle = document.querySelector(".displayTravels"); // while (eventItemArticle.firstChild) {
    //     eventItemArticle.removeChild(eventItemArticle.firstChild)
    // }

    eventItemArticle.innerHTML = "", eventItemArticle.appendChild(travelNameField);
    eventItemArticle.appendChild(travelReviewField);
    eventItemArticle.appendChild(updateButton);
  }

};
var _default = editForm;
exports.default = _default;

},{"./travelerCollection":3,"./travelerList":5}],2:[function(require,module,exports){
"use strict";

var _travelerDomBuilder = _interopRequireDefault(require("./travelerDomBuilder"));

var _travelerList = _interopRequireDefault(require("./travelerList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_travelerDomBuilder.default.travelBuilding();

_travelerList.default.listing();

},{"./travelerDomBuilder":4,"./travelerList":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const travelerCollection = {
  getAllTravels() {
    return fetch("http://localhost:8088/interests").then(response => response.json());
  },

  postAllTravels(travelToSave) {
    return fetch("http://localhost:8088/interests", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(travelToSave)
    });
  },

  deleteTravels(travelId) {
    return fetch(`http://localhost:8088/interests/${travelId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  getTravel(travelId) {
    return fetch(`http://localhost:8088/interests/${travelId}`).then(response => response.json());
  },

  editTravels(travelId, eventToEdit) {
    return fetch(`http://localhost:8088/interests/${travelId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(eventToEdit)
    });
  }

};
var _default = travelerCollection;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _travelerCollection = _interopRequireDefault(require("./travelerCollection"));

var _travelerList = _interopRequireDefault(require("./travelerList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const travelBuilder = {
  travelBuilding() {
    //      Dropdown to pick which place the point of interest is located in
    let eventHeader = document.createElement("h2");
    eventHeader.textContent = "Ternary Traveler";
    eventHeader.setAttribute("id", "formTravel_id"); // Name of the point of interest

    let travelField = document.createElement("fieldset");
    let travelNameLabel = document.createElement("label");
    travelNameLabel.setAttribute("for", "travel__name");
    let inputTravel = document.createElement("input");
    inputTravel.setAttribute("id", "travelName");
    inputTravel.placeholder = "Name";
    inputTravel.setAttribute("name", "travel-name");
    travelField.appendChild(travelNameLabel);
    travelField.appendChild(inputTravel); // Description of the point of interest

    let descriptionField = document.createElement("fieldset");
    let descriptionLabel = document.createElement("label");
    descriptionLabel.setAttribute("for", "description");
    let inputDescription = document.createElement("input");
    inputDescription.setAttribute("id", "description");
    inputDescription.placeholder = "Description";
    inputDescription.setAttribute("name", "description");
    descriptionField.appendChild(descriptionLabel);
    descriptionField.appendChild(inputDescription); // Cost of visiting the point of interest

    let costField = document.createElement("fieldset");
    let costLabel = document.createElement("label");
    costLabel.setAttribute("for", "cost");
    let inputCost = document.createElement("input");
    inputCost.setAttribute("id", "cost");
    inputCost.placeholder = "Cost";
    inputCost.setAttribute("name", "cost");
    costField.appendChild(costLabel);
    costField.appendChild(inputCost);
    let placeField = document.createElement("fieldset");
    let placeLabel = document.createElement("select");
    placeLabel.setAttribute("for", "countries");
    placeLabel.setAttribute("id", "place");
    placeField.appendChild(placeLabel);
    placeLabel.appendChild(new Option("Italy", "Italy"));
    placeLabel.appendChild(new Option("Switzerland", "Switzerland"));
    placeLabel.appendChild(new Option("France", "France"));
    let submitButton = document.createElement("button");
    submitButton.textContent = "Add Travel";
    submitButton.setAttribute("class", "travel-save");
    submitButton.addEventListener("click", this.handleAddNewTravel);
    let travelFormFragment = document.createDocumentFragment();
    travelFormFragment.appendChild(eventHeader);
    travelFormFragment.appendChild(travelField);
    travelFormFragment.appendChild(descriptionField);
    travelFormFragment.appendChild(costField);
    travelFormFragment.appendChild(placeField);
    travelFormFragment.appendChild(submitButton);
    let formArticle = document.querySelector(".output");
    formArticle.appendChild(travelFormFragment);
    return inputTravel;
  },

  handleAddNewTravel() {
    let inputName = document.querySelector("#travelName").value;
    let inputTravelDescription = document.querySelector("#description").value;
    let inputTravelCost = document.querySelector("#cost").value;
    let inputTravelPlace = document.querySelector("#place").value;
    console.log(inputTravelDescription);
    let newTravel = {
      name: inputName,
      description: inputTravelDescription,
      cost: inputTravelCost,
      place: inputTravelPlace
    };

    _travelerCollection.default.postAllTravels(newTravel).then(response => {
      _travelerList.default.listing();

      console.log(response);
    });
  }

};
var _default = travelBuilder;
exports.default = _default;

},{"./travelerCollection":3,"./travelerList":5}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _travelerCollection = _interopRequireDefault(require("./travelerCollection"));

var _travels = _interopRequireDefault(require("./travels"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const travelerList = {
  listing() {
    _travelerCollection.default.getAllTravels().then(allTravels => {
      let eventDocFragment = document.createDocumentFragment();
      allTravels.forEach(travelItem => {
        let travelHTML = _travels.default.creatingTravels(travelItem);

        eventDocFragment.appendChild(travelHTML);
        console.log(allTravels);
      });
      let outputArticle = document.querySelector(".displayTravels");

      while (outputArticle.firstChild) {
        outputArticle.removeChild(outputArticle.firstChild);
      }

      outputArticle.appendChild(eventDocFragment);
    });
  }

};
var _default = travelerList;
exports.default = _default;

},{"./travelerCollection":3,"./travels":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _editForm = _interopRequireDefault(require("./editForm"));

var _travelerCollection = _interopRequireDefault(require("./travelerCollection"));

var _travelerList = _interopRequireDefault(require("./travelerList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createTravels = {
  creatingTravels(travelObject) {
    let travelArticle = document.createElement("fieldset");
    let travelName = document.createElement("h3");
    travelName.textContent = travelObject.name;
    let travelDescription = document.createElement("section");
    travelDescription.textContent = travelObject.description;
    let travelCost = document.createElement("section");
    travelCost.textContent = travelObject.cost;
    let travelPlace = document.createElement("section");
    travelPlace.textContent = travelObject.place;
    let travelReview = document.createElement("section");
    travelReview.textContent = travelObject.review;
    let editButton = document.createElement("button");
    editButton.textContent = "Edit Event";
    editButton.setAttribute("id", `editEvent--${travelObject.id}`);
    editButton.addEventListener("click", () => {
      let articleID = event.target.id;
      console.log(articleID);
      let eventId = articleID.split("--")[1];
      console.log(eventId);

      _travelerCollection.default.getTravel(eventId).then(response => {
        _editForm.default.createEditForm(response);
      });
    });
    let deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete Event";
    deleteButton.setAttribute("id", `deleteEvent--${travelObject.id}`);
    deleteButton.addEventListener("click", () => {
      console.log(event);
      let travelId = event.target.id.split("--")[1];

      _travelerCollection.default.deleteTravels(travelId).then(response => {
        _travelerList.default.listing();

        console.log(response);
      });
    });
    travelArticle.appendChild(travelName);
    travelArticle.appendChild(travelDescription);
    travelArticle.appendChild(travelCost);
    travelArticle.appendChild(travelPlace);
    travelArticle.appendChild(travelReview);
    travelArticle.appendChild(editButton);
    travelArticle.appendChild(deleteButton);
    return travelArticle;
  }

};
var _default = createTravels;
exports.default = _default;

},{"./editForm":1,"./travelerCollection":3,"./travelerList":5}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
